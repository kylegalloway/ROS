// Generated by gencpp from file robot_tutorials/robot.msg
// DO NOT EDIT!


#ifndef ROBOT_TUTORIALS_MESSAGE_ROBOT_H
#define ROBOT_TUTORIALS_MESSAGE_ROBOT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_tutorials
{
template <class ContainerAllocator>
struct robot_
{
  typedef robot_<ContainerAllocator> Type;

  robot_()
    : robot_name()
    , country()
    , product_id(0)  {
    }
  robot_(const ContainerAllocator& _alloc)
    : robot_name(_alloc)
    , country(_alloc)
    , product_id(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _country_type;
  _country_type country;

   typedef uint8_t _product_id_type;
  _product_id_type product_id;





  typedef boost::shared_ptr< ::robot_tutorials::robot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_tutorials::robot_<ContainerAllocator> const> ConstPtr;

}; // struct robot_

typedef ::robot_tutorials::robot_<std::allocator<void> > robot;

typedef boost::shared_ptr< ::robot_tutorials::robot > robotPtr;
typedef boost::shared_ptr< ::robot_tutorials::robot const> robotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_tutorials::robot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_tutorials::robot_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'robot_tutorials': ['/mnt/d/personal/ROS/wallE_ws/src/robot_tutorials/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_tutorials::robot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_tutorials::robot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_tutorials::robot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_tutorials::robot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_tutorials::robot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_tutorials::robot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_tutorials::robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77a2470f91f15b079bebc4e6c7b62731";
  }

  static const char* value(const ::robot_tutorials::robot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77a2470f91f15b07ULL;
  static const uint64_t static_value2 = 0x9bebc4e6c7b62731ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_tutorials::robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_tutorials/robot";
  }

  static const char* value(const ::robot_tutorials::robot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_tutorials::robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_name\n\
string country\n\
uint8 product_id\n\
";
  }

  static const char* value(const ::robot_tutorials::robot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_tutorials::robot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_name);
      stream.next(m.country);
      stream.next(m.product_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_tutorials::robot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_tutorials::robot_<ContainerAllocator>& v)
  {
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "country: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.country);
    s << indent << "product_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.product_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_TUTORIALS_MESSAGE_ROBOT_H
